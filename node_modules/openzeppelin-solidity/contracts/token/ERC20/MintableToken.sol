pragma solidity ^0.4.24;

import "./StandardToken.sol";
import "../../ownership/Ownable.sol";


/**
 * @title Mintable token
 * @dev Simple ERC20 Token example, with mintable token creation
 * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol
 */
 // 铸币合约 
contract MintableToken is StandardToken, Ownable {
  event Mint(address indexed to, uint256 amount);
  event MintFinished();

// 代表完成
  bool public mintingFinished = false;


// 可以铸造
  modifier canMint() {
    require(!mintingFinished);
    _;
  }

 // 判断当前地址是否拥有指定地址有铸币权限
  modifier hasMintPermission() {
    require(msg.sender == owner);
    _;
  }

  /**
   * @dev Function to mint tokens
   * @param _to The address that will receive the minted tokens.
   * @param _amount The amount of tokens to mint.
   * @return A boolean that indicates if the operation was successful.
   */


  function mint(
    address _to,
    uint256 _amount
  )

    public
    hasMintPermission
    canMint
    returns (bool)
  {
    // 发行总量需要增加
    totalSupply_ = totalSupply_.add(_amount);
     // 余额也需要增加
    balances[_to] = balances[_to].add(_amount);
     // 铸币
    emit Mint(_to, _amount);
    // 代表系统给你的 。
    emit Transfer(address(0), _to, _amount);
    return true;
  }

  /**
   * @dev Function to stop minting new tokens.
   * @return True if the operation was successful.
   */
   // 代表铸币完成
  function finishMinting() public onlyOwner canMint returns (bool) {
    //完成
    mintingFinished = true;
    emit MintFinished();
    return true;
  }
}
